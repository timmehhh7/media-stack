---
networks:
  proxy:
    external: true
    name: proxy
  media:
    driver: bridge
  backend:
    driver: bridge

services:
  nzbget:
    image: linuxserver/nzbget:version-v21.1
    container_name: nzbget
    restart: unless-stopped
    networks:
      - media
    volumes:
      - "/mnt/APPS/nzbget:/config"
      - "/mnt/MEDIA/Downloads:/downloads"
      - "/mnt/MEDIA/Downloads/complete:/downloads/complete"
    ports:
      - 27020:6789
    environment:
      - PUID=500
      - PGID=100
  sonarr:
    image: linuxserver/sonarr:4.0.15
    # image: linuxserver/sonarr
    container_name: sonarr
    restart: unless-stopped
    security_opt:
      - seccomp:unconfined
    depends_on:
      - nzbget
    networks:
      - media
    volumes:
      - "/mnt/APPS/sonarr:/config"
      - "/mnt/MEDIA/TV:/tv"
      - "/mnt/MEDIA/Downloads/complete/Series:/downloads"
    ports:
      - 27021:8989
    links:
      - nzbget
    environment:
      - PUID=500
      - PGID=100
  radarr:
    image: linuxserver/radarr:5.27.5
    container_name: radarr
    restart: unless-stopped
    depends_on:
      - nzbget
    networks:
      - media
    volumes:
      - "/mnt/APPS/radarr:/config"
      - "/mnt/MEDIA/Movies:/movies"
      - "/mnt/MEDIA/Downloads/complete/Movies:/downloads"
    ports:
      - 27022:7878
    links:
      - nzbget
    environment:
      - PUID=500
      - PGID=100
  plex:
    image: plexinc/pms-docker:plexpass
    container_name: plex
    restart: unless-stopped
    volumes:
      - "/home/tim/PlexConfig:/config"
      - "/mnt/MEDIA/Transcode:/transcode"
      - "/mnt/MEDIA:/data"
    network_mode: host
    hostname: fairweatherflix
    environment:
      - TZ="America/Eastern"
      - PUID=500
      - PGID=100
    devices:
      - /dev/dri:/dev/dri
  tautulli:
    image: linuxserver/tautulli:2.16.0
    container_name: tautulli
    restart: unless-stopped
    depends_on:
      - plex
    networks:
      - media
    volumes:
      - "/mnt/APPS/tautulli:/config"
      - "/home/tim/PlexConfig/Library/Application\ Support/Plex\ Media\ Server/Logs:/logs:ro"
    ports:
      - 27023:8181
    environment:
      - PUID=500
      - PGID=100
  overseerr:
    image: sctx/overseerr:latest
    container_name: overseerr
    restart: unless-stopped
    environment:
      - TZ="America/Eastern"
      - PUID=500
      - PGID=100
      - PORT=5055 #optional
    ports:
      - 5055:5055
    volumes:
      - /mnt/APPS/overseerr:/app/config
    networks:
      - proxy
      - media
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.overseerr.rule=Host(`requests.${BASE_DOMAIN}`)"
      - "traefik.http.routers.overseerr.entrypoints=websecure"
      - "traefik.http.routers.overseerr.tls=true"
      - "traefik.http.routers.overseerr.tls.certresolver=le-dns"
      - "traefik.http.services.overseerr.loadbalancer.server.port=5055"
  traefik:
    image: "traefik:v3.4"
    container_name: "traefik"
    restart: unless-stopped
    environment:
      # ---- Cloudflare DNS for ACME (lego uses this var) ----
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
      - TZ="America/Eastern"
      - PUID=500
      - PGID=100
    security_opt:
      - no-new-privileges:true
    command:
      # ---- Providers ----
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=proxy
      # ---- EntryPoints ----
      - --entryPoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls.certresolver=le-dns
      # ---- API / Dashboard ----
      - --api.dashboard=true
      - --api.insecure=false
      - --api=true
      # ---- ACME / Let's Encrypt (DNS-01 with Cloudflare) ----
      - --certificatesresolvers.le-dns.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.le-dns.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.le-dns.acme.dnschallenge.provider=cloudflare
      # If your DNS is slow to propagate, bump this a bit (in seconds)
      - --certificatesresolvers.le-dns.acme.dnschallenge.delayBeforeCheck=10

      # (Optional) First run against staging to avoid rate limits:
      # - --certificatesresolvers.le-dns.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
    networks:
      - proxy
    labels:
      - "traefik.enable=true"

      # ---------- TLS: request a wildcard cert up front ----------
      # Traefik only asks for a wildcard when you declare tls.domains
      # - "traefik.http.routers._acme-catchall.tls=true"
      # - "traefik.http.routers._acme-catchall.tls.certresolver=le-dns"
      # - "traefik.http.routers._acme-catchall.rule=HostRegexp(`{any:.+}`)"  # dummy router to trigger cert request
      # - "traefik.http.routers._acme-catchall.entrypoints=websecure"
      # - "traefik.http.routers._acme-catchall.priority=1"
      # - "traefik.http.routers._acme-catchall.service=noop@internal"
      # - "traefik.http.routers._acme-catchall.tls.domains[0].main=${BASE_DOMAIN}"
      # - "traefik.http.routers._acme-catchall.tls.domains[0].sans=*.${BASE_DOMAIN}"

      # ---------- Dashboard (secured) ----------
      - "traefik.http.routers.traefik.rule=Host(`traefik.${BASE_DOMAIN}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=le-dns"
      - "traefik.http.routers.traefik.service=api@internal"
      # - "traefik.http.routers.traefik.middlewares=dashboard-auth,secure-headers"

      # Basic auth for dashboard
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${TRAEFIK_DASHBOARD_USERS}"

      # Some sensible security headers (adjust as you like)
      # - "traefik.http.middlewares.secure-headers.headers.stsSeconds=63072000"
      # - "traefik.http.middlewares.secure-headers.headers.stsIncludeSubdomains=true"
      # - "traefik.http.middlewares.secure-headers.headers.stsPreload=true"
      # - "traefik.http.middlewares.secure-headers.headers.referrerPolicy=no-referrer-when-downgrade"
      # - "traefik.http.middlewares.secure-headers.headers.frameDeny=true"
      # - "traefik.http.middlewares.secure-headers.headers.contentTypeNosniff=true"
      # - "traefik.http.middlewares.secure-headers.headers.browserXssFilter=true"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /mnt/APPS/traefik/letsencrypt:/letsencrypt

  # whoami:
  #   image: "traefik/whoami"
  #   restart: unless-stopped
  #   # networks:
  #   #   - proxy
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.whoami.rule=Host(`whoami.${BASE_DOMAIN}`)"
  #     - "traefik.http.routers.whoami.entrypoints=web"
  ddclient:
    image: ghcr.io/linuxserver/ddclient
    container_name: ddclient
    restart: unless-stopped
    environment:
      - PUID=500
      - PGID=100
    networks:
      - media
    volumes:
      - /mnt/APPS/ddclient:/config
  homeassistant:
    image: ghcr.io/home-assistant/home-assistant:stable
    container_name: homeassistant
    restart: unless-stopped
    environment:
      - TZ="America/Eastern"
      - PUID=500
      - PGID=100
    network_mode: host
    volumes:
      - /mnt/APPS/homeassistant:/config
  homebridge:
    image: oznu/homebridge:latest
    container_name: homebridge
    restart: unless-stopped
    network_mode: host
    environment:
      - TZ="America/Eastern"
      - PGID=100
      - PUID=500
      - HOMEBRIDGE_CONFIG_UI=1
      - HOMEBRIDGE_CONFIG_UI_PORT=8581
    volumes:
      - /mnt/APPS/homebridge:/homebridge
  tdarr:
    image: haveagitgat/tdarr
    container_name: tdarr
    restart: unless-stopped
    ports:
      - "8265:8265" # WebUI
      - "8266:8266" # Node communications
    environment:
      - TZ="America/Eastern"
      - PUID=500
      - PGID=100
      - serverIP=10.88.111.202 # Or your server's IP
      - serverPort=8266
      - internalNode=true
      - inContainer=true
      - ffmpegVersion=7
      - nodeName=Krypton
      - nodeHardwareEncoding=true
      - LIBVA_DRIVER_NAME=iHD              # use the modern Intel media driver
      - FFMPEG_HWACCEL_ARGS=-hwaccel qsv -qsv_device /dev/dri/renderD128
    networks:
      - media
    volumes:
      - /mnt/APPS/tdarr/server:/app/server
      - /mnt/APPS/tdarr/logs:/app/logs
      - /mnt/APPS/tdarr/configs:/app/configs
      - /mnt/MEDIA:/media # Your media library
      - /mnt/tdarr-cache:/temp # Transcode cache
      # Optional: Specify Intel QSV for FFMPEG
      # - FFMPEG_HWACCEL_ARGS=-hwaccel qsv -qsv_device /dev/dri/renderD128 
      #    devices:
      #- /dev/dri:/dev/dri # Expose Intel iGPU devices
    group_add:       
      - "44"
      - "993"
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
      - /dev/dri/card0:/dev/dri/card0
  n8n:
    image: docker.n8n.io/n8nio/n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_HOST=automate.thefairweathers.ca
      - N8N_PORT=5678
      - N8N_RUNNERS_ENABLED=true
      - N8N_PROXY_HOPS=1
      - N8N_PROTOCOL=https
      - N8N_EMAIL_MODE=smtp
      - N8N_SMTP_HOST=smtp-relay.brevo.com
      - N8N_SMTP_PORT=587
      - N8N_SMTP_USER=${SMTP_USER}
      - N8N_SMTP_PASS=${SMTP_PASSWORD}
      - N8N_SMTP_SENDER="n8n <noreply@thefairweathers.ca>"
      - N8N_SMTP_SSL=false
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=${N8N_DB_USER}
      - DB_POSTGRESDB_PASSWORD=${N8N_DB_PASSWORD}
      - NODE_ENV=production
      - WEBHOOK_URL=https://automate.thefairweathers.ca
      - N8N_EDITOR_BASE_URL=https://automate.thefairweathers.ca
      - TZ=America/Toronto
      - GENERIC_TIMEZONE=America/Toronto
      - PUID=500
      - PGID=100
      # - N8N_LOG_LEVEL=debug
    networks:
      - backend
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.n8n.rule=Host(`automate.${BASE_DOMAIN}`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls=true"
      - "traefik.http.routers.n8n.tls.certresolver=le-dns"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
    volumes:
      - /mnt/APPS/n8n:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy
  postgres:
    image: postgres:16
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=n8n
      - POSTGRES_USER=${N8N_DB_USER}
      - POSTGRES_PASSWORD=${N8N_DB_PASSWORD}
      - TZ="America/Eastern"
      - PUID=500
      - PGID=100
    networks:
      - backend
    volumes:
      - /mnt/n8n-pg:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n"]
      interval: 10s
      timeout: 5s
      retries: 5
